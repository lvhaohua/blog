(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{460:function(s,t,a){"use strict";a.r(t);var n=a(15),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("每个渲染进程都会有一个主线程，并且主线程非常繁忙，既要处理 DOM，又要计算样式，还要处理布局，同时还需要处理 JavaScript 任务以及各种输入事件。要让这么多不同类型的任务在主线程中有条不紊地执行，这就需要一个系统来统筹调度这些任务，这个统筹调度系统就是我们今天要讲的消息队列和事件循环系统。")]),s._v(" "),a("h2",{attrs:{id:"一、使用单线程处理安排好的任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、使用单线程处理安排好的任务"}},[s._v("#")]),s._v(" 一、使用单线程处理安排好的任务")]),s._v(" "),a("p",[s._v("我们先从最简单的场景讲起，比如有如下一系列的任务：")]),s._v(" "),a("p",[s._v("任务 1：1+2")]),s._v(" "),a("p",[s._v("任务 2：20/5")]),s._v(" "),a("p",[s._v("任务 3：7*8")]),s._v(" "),a("p",[s._v("任务 4：打印出任务 1、任务 2、任务 3 的运算结果")]),s._v(" "),a("p",[s._v("现在要在一个线程中去执行这些任务，通常我们会这样编写代码：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("handleTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" task1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" task2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" task3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" task2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" task3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("handleTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("在上面的执行代码中，我们把所有任务代码按照顺序写进主线程里，等线程执行时，这些任务会按照顺序在线程中依次被执行；等所有任务执行完成之后，线程会自动退出。可以参考下图来直观地理解下其执行过程：")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://static001.geekbang.org/resource/image/72/bc/72726678ac6604116c1d5dad160780bc.png"}}),s._v(" "),a("h2",{attrs:{id:"二、在线程运行过程中处理新任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、在线程运行过程中处理新任务"}},[s._v("#")]),s._v(" 二、在线程运行过程中处理新任务")]),s._v(" "),a("p",[s._v("但并不是所有的任务都是在执行之前统一安排好的，大部分情况下，新的任务是在线程运行过程中产生的。比如在线程执行过程中，又接收到了一个新的任务要求计算“10+2”，那上面那种方式就无法处理这种情况了。")]),s._v(" "),a("p",[a("strong",[s._v("要想在线程运行过程中，能接收并执行新的任务，就需要采用事件循环机制。")])]),s._v(" "),a("p",[s._v("我们可以通过一个 for 循环语句来监听是否有新的任务，如下面的示例代码：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRandomNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("handleTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInputNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInputNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("handleTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("相较于第一版的线程，这一版的线程做了两点改进。")]),s._v(" "),a("ul",[a("li",[s._v("第一点引入了"),a("strong",[s._v("循环机制")]),s._v("，具体实现方式是在线程语句外添加了一个 for 循环语句，线程会一直循环执行。")]),s._v(" "),a("li",[s._v("第二点是引入了"),a("strong",[s._v("事件")]),s._v("，可以在线程运行过程中，等待用户输入的数字，这里是使用异步模拟的输入，等待获取到输入的数字后再执行相加运算，最后输出结果。")])]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://static001.geekbang.org/resource/image/9e/e3/9e0f595324fbd5b7cd1c1ae1140f7de3.png"}}),s._v(" "),a("h2",{attrs:{id:"三、处理其他线程发送过来的任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、处理其他线程发送过来的任务"}},[s._v("#")]),s._v(" 三、处理其他线程发送过来的任务")]),s._v(" "),a("p",[s._v("上面模型中所有的任务都是来自于线程内部的，如果另外一个线程想让主线程执行一个任务，利用第二版的线程模型是无法做到的。")]),s._v(" "),a("p",[s._v("下面我们先来看看其他线程是如何发送消息给渲染主线程的：")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://static001.geekbang.org/resource/image/2e/05/2eb6a8ecb7cb528da4663573d74eb305.png"}}),s._v(" "),a("p",[s._v("从上图可以看出，渲染主线程会频繁接收到来自于 IO 线程的一些任务，接收到这些任务之后，渲染进程就需要着手处理，比如接收到资源加载完成的消息后，渲染进程就要着手进行 DOM 解析了；接收到鼠标点击的消息后，渲染主线程就要开始执行相应的 JavaScript 脚本来处理该点击事件。")]),s._v(" "),a("p",[s._v("那么如何设计好一个线程模型，能让其能够接收其他线程发送的消息呢？")]),s._v(" "),a("p",[s._v("一个通用模式是使用"),a("strong",[s._v("消息队列")]),s._v("。")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://static001.geekbang.org/resource/image/2a/ab/2ac6bc0361cb4690c5cc83d8abad22ab.png"}}),s._v(" "),a("p",[s._v("从上图可以看出，我们的改造可以分为下面三个步骤：")]),s._v(" "),a("ol",[a("li",[s._v("添加一个消息队列")]),s._v(" "),a("li",[s._v("IO 线程中产生的新任务添加进消息队列尾部")]),s._v(" "),a("li",[s._v("渲染主线程会循环地从消息队列头部中读取任务，执行任务")])]),s._v(" "),a("p",[s._v("下面用代码来模拟实现：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从队列获取任务和添加任务接口")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("takeTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pushTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 主线程")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" taskQueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ProcessTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("handleTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" task "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" taskQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("takeTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从队列中取出任务")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ProcessTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行任务")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("handleTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("若有新的任务需要执行只需要插入任务队列即可")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("taskQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pushTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clickTask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("由于是多个线程操作同一个消息队列，所以在添加任务和取出任务时还会加上一个同步锁.")]),s._v(" "),a("h2",{attrs:{id:"四、处理其他进程发送过来的任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、处理其他进程发送过来的任务"}},[s._v("#")]),s._v(" 四、处理其他进程发送过来的任务")]),s._v(" "),a("p",[s._v("渲染进程专门有一个 "),a("strong",[s._v("IO 线程")]),s._v("用来接收其他进程传进来的消息，接收到消息之后，会将这些消息组装成任务发送给渲染主线程，后续的步骤就和前面讲解的“"),a("strong",[s._v("处理其他线程发送的任务")]),s._v("”一样")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://static001.geekbang.org/resource/image/e2/c6/e2582e980632fd2df5043f81a11461c6.png"}}),s._v(" "),a("h2",{attrs:{id:"五、消息队列中的任务类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、消息队列中的任务类型"}},[s._v("#")]),s._v(" 五、消息队列中的任务类型")]),s._v(" "),a("p",[s._v("消息队列中的任务类型有很多，如："),a("strong",[s._v("输入事件（鼠标滚动、点击、移动）、微任务、文件读写、WebSocket、JavaScript 定时器")]),s._v("等等")]),s._v(" "),a("p",[s._v("除此之外，消息队列中还包含了很多与页面相关的事件，如 "),a("strong",[s._v("JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画")]),s._v("等")]),s._v(" "),a("p",[s._v("以上这些事件都是在主线程中执行的，所以在编写 Web 应用时，你还需要衡量这些事件所占用的时长，并想办法解决单个任务占用主线程过久的问题。")]),s._v(" "),a("h2",{attrs:{id:"六、如何安全退出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、如何安全退出"}},[s._v("#")]),s._v(" 六、如何安全退出")]),s._v(" "),a("p",[s._v("当页面主线程执行完成之后，又该如何保证页面主线程能够安全退出呢？")]),s._v(" "),a("p",[s._v("Chrome 是这样解决的，确定要退出当前页面时，页面主线程会设置一个"),a("strong",[s._v("退出标志的变量")]),s._v("，在每次执行完一个任务时，判断是否有设置退出标志，如果设置了该退出标志，那么就直接中断当前的所有任务，退出线程。")]),s._v(" "),a("h2",{attrs:{id:"七、页面使用单线程的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、页面使用单线程的缺点"}},[s._v("#")]),s._v(" 七、页面使用单线程的缺点")]),s._v(" "),a("p",[s._v("通过上面的介绍，你应该清楚了，页面线程所有执行的任务都来自于消息队列。消息队列是“先进先出”的属性，也就是说放入队列中的任务，需要等待前面的任务被执行完，才会被执行。")]),s._v(" "),a("p",[s._v("鉴于这个属性，就有如下"),a("strong",[s._v("两个问题")]),s._v("需要解决。")]),s._v(" "),a("h3",{attrs:{id:"_1-如何处理高优先级的任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何处理高优先级的任务"}},[s._v("#")]),s._v(" 1. 如何处理高优先级的任务")]),s._v(" "),a("p",[s._v("比如一个典型的场景是监控 DOM 节点的变化情况（节点的插入、修改、删除等动态变化），然后根据这些变化来处理相应的业务逻辑。")]),s._v(" "),a("p",[a("strong",[s._v("方法 1")]),s._v("：利用 JavaScript 设计一套监听接口，当变化发生时，渲染引擎"),a("strong",[s._v("同步")]),s._v("调用这些接口，这是一个典型的"),a("strong",[s._v("观察者模式")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("方法 1 弊端")]),s._v("：DOM 变化非常频繁，如果每次发生变化的时候，都直接调用相应的 JavaScript 接口，那么这个当前的任务执行时间会被拉长，从而导致"),a("strong",[s._v("执行效率的下降")])]),s._v(" "),a("p",[a("strong",[s._v("方法 2")]),s._v("：将这些 DOM 变化做成异步的消息事件，添加到消息队列的尾部。")]),s._v(" "),a("p",[a("strong",[s._v("方法 2 弊端")]),s._v("：会影响到"),a("strong",[s._v("监控的实时性")]),s._v("，因为在添加到消息队列的过程中，可能前面就有很多任务在排队了。")]),s._v(" "),a("p",[s._v("这也就是说，如果 DOM 发生变化，采用"),a("strong",[s._v("同步通知的方式，会影响当前任务的执行效率")]),s._v("；如果"),a("strong",[s._v("采用异步方式，又会影响到监控的实时性")]),s._v("。")]),s._v(" "),a("p",[s._v("针对这种情况，"),a("strong",[s._v("微任务")]),s._v("就应用而生了。")]),s._v(" "),a("p",[s._v("通常我们把消息队列中的任务称为"),a("strong",[s._v("宏任务")]),s._v("，"),a("strong",[s._v("每个宏任务中都包含了一个微任务队列")]),s._v("，在执行宏任务的过程中，如果 DOM 有变化，那么就会将该变化添加到微任务列表中，这样就不会影响到宏任务的继续执行，因此也就解决了"),a("strong",[s._v("执行效率")]),s._v("的问题。")]),s._v(" "),a("p",[s._v("等宏任务中的主要功能都直接完成之后，这时候，渲染引擎并不着急去执行下一个宏任务，而是执行当前宏任务中的微任务，因为 DOM 变化的事件都保存在这些微任务队列中，这样也就解决了"),a("strong",[s._v("实时性")]),s._v("问题。")]),s._v(" "),a("h3",{attrs:{id:"_2-如何解决单个任务执行时长过久的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何解决单个任务执行时长过久的问题"}},[s._v("#")]),s._v(" 2. 如何解决单个任务执行时长过久的问题")]),s._v(" "),a("p",[s._v("因为所有的任务都是在单线程中执行的，所以每次只能执行一个任务，而其他任务就都处于等待状态。如果其中一个任务执行时间过久，那么下一个任务就要等待很长时间。")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://static001.geekbang.org/resource/image/8d/cc/8de4b43fca99b180fdffe6a5af07b5cc.png"}}),s._v(" "),a("p",[s._v("从图中你可以看到，如果在执行动画过程中，其中有个 JavaScript 任务因执行时间过久，占用了动画单帧的时间，这样会给用户制造了卡顿的感觉，这当然是极不好的用户体验。针对这种情况，JavaScript 可以通过回调功能来规避这种问题，也就是让要执行的 JavaScript 任务滞后执行。")]),s._v(" "),a("h2",{attrs:{id:"八、浏览器页面是如何运行的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、浏览器页面是如何运行的"}},[s._v("#")]),s._v(" 八、浏览器页面是如何运行的")]),s._v(" "),a("p",[s._v('通过"performance"工具可以查看整个页面加载过程中的事件执行情况')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://resource-save-01.oss-cn-chengdu.aliyuncs.com/img/298451601959791_.pic_hd.jpg",alt:""}})]),s._v(" "),a("p",[s._v("从图中可以看出，我们点击展开了 Main 这个项目，其记录了主线程执行过程中的所有任务。图中灰色的就是一个个任务，每个任务下面还有子任务，其中的 Parse HTML 任务，是把 HTML 解析为 DOM 的任务。值得注意的是，在执行 Parse HTML 的时候，如果遇到 JavaScript 脚本，那么会暂停当前的 HTML 解析而去执行 JavaScript 脚本。")]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("ul",[a("li",[s._v("第一版线程模型：如果有一些确定好的任务，可以使用一个"),a("strong",[s._v("单线程")]),s._v("来按照顺序处理这些任务")]),s._v(" "),a("li",[s._v("第二版线程模型：要在线程执行过程中"),a("strong",[s._v("动态的接收并处理新的任务")]),s._v("，就需要引入"),a("strong",[s._v("循环语句")]),s._v("和"),a("strong",[s._v("事件系统")])]),s._v(" "),a("li",[s._v("第三版线程模型：如果要接收其他线程发送过来的任务，就需要引入"),a("strong",[s._v("消息队列")])]),s._v(" "),a("li",[s._v("如果其他进程想要发送任务给页面主线程，那么先通过 IPC 把任务发送给渲染进程的 IO 线程，IO 线程再把任务发送给页面主线程")]),s._v(" "),a("li",[s._v("微任务：消息队列机制并不是太灵活，为了解决"),a("strong",[s._v("执行效率")]),s._v("和"),a("strong",[s._v("实时性")]),s._v("问题，所以引入了微任务")])]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://static001.geekbang.org/resource/image/e2/c6/e2582e980632fd2df5043f81a11461c6.png"}})])}),[],!1,null,null,null);t.default=e.exports}}]);