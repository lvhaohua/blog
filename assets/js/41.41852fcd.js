(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{466:function(s,t,a){"use strict";a.r(t);var n=a(15),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("Leetcode-876: "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/middle-of-the-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("链表的中间结点"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[s._v("#")]),s._v(" 题目描述")]),s._v(" "),a("p",[s._v("给定一个头结点为 "),a("code",[s._v("head")]),s._v(" 的非空单链表，返回链表的中间结点。")]),s._v(" "),a("p",[s._v("如果有两个中间结点，则返回第二个中间结点。")]),s._v(" "),a("p",[a("strong",[s._v("示例 1：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：[1,2,3,4,5]\n输出：此列表中的结点 3 (序列化形式：[3,4,5])\n返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。\n注意，我们返回了一个 ListNode 类型的对象 ans，这样：\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("示例 2：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：[1,2,3,4,5,6]\n输出：此列表中的结点 4 (序列化形式：[4,5,6])\n由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("提示：")])]),s._v(" "),a("ul",[a("li",[s._v("给定链表的结点数介于 "),a("code",[s._v("1")]),s._v(" 和 "),a("code",[s._v("100")]),s._v(" 之间。")])]),s._v(" "),a("h2",{attrs:{id:"解法-1-常规遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解法-1-常规遍历"}},[s._v("#")]),s._v(" 解法 1：常规遍历")]),s._v(" "),a("p",[s._v("这道题比较简单，常规的简单的做法就是完整遍历一次链表，把结点都存下来，比如存到一个数组中，直接取数组的中间结点就可以了，")]),s._v(" "),a("p",[s._v("但是这样的话引入了一个数组来存储结点，所以空间复杂度就为"),a("em",[s._v("O")]),s._v("(n)，时间复杂度当然也是"),a("em",[s._v("O")]),s._v("(n)啦，因为要完整遍历一次。")]),s._v(" "),a("h2",{attrs:{id:"解法-2-单指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解法-2-单指针"}},[s._v("#")]),s._v(" 解法 2：单指针")]),s._v(" "),a("p",[s._v("解法 1 的空间复杂度可以稍微优化一下，没了空间当然就要拿时间来换了，所以引用单指针方法，延用解法 1 的思路，先遍历一次记录下整体的链表长度，再进行第二次遍历，遍历到长度的一半就 ok 了。")]),s._v(" "),a("p",[s._v("以上两种遍历的思路都比较简单，就不写代码了。")]),s._v(" "),a("h2",{attrs:{id:"解法-3-快慢指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解法-3-快慢指针"}},[s._v("#")]),s._v(" 解法 3：快慢指针")]),s._v(" "),a("p",[s._v("前面“链表中环的检测”中已经使用过快慢指针的方法了，再借这个题复习一下")]),s._v(" "),a("p",[s._v("整体思路的话，就是引入两个指针： 快指针，慢指针")]),s._v(" "),a("p",[s._v("快指针每一次走两步，慢指针每一次走一步，当快指针到末尾的时候，慢指针正好就在中间了嘛")]),s._v(" "),a("p",[s._v("注意一下遍历的退出条件即可，下面贴代码")]),s._v(" "),a("p",[s._v("TypeScript：")]),s._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("middleNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ListNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ListNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度"}},[s._v("#")]),s._v(" 复杂度")]),s._v(" "),a("p",[s._v("空间复杂度："),a("em",[s._v("O")]),s._v("(1) ，两个指针，问题不大。")]),s._v(" "),a("p",[s._v("时间复杂度："),a("em",[s._v("O")]),s._v("(N)，要遍历完整个链表，N 就是链表的长度。")])])}),[],!1,null,null,null);t.default=e.exports}}]);