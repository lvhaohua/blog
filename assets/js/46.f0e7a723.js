(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{474:function(s,t,n){"use strict";n.r(t);var a=n(15),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("Leetcode-24: "),n("a",{attrs:{href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"}},[s._v("两两交换链表中的结点"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[s._v("#")]),s._v(" 题目描述")]),s._v(" "),n("p",[s._v("给定一个链表，两两交换其中相邻的结点，并返回交换后的链表。")]),s._v(" "),n("p",[n("strong",[s._v("你不能只是单纯的改变结点内部的值")]),s._v("，而是需要实际的进行结点交换。")]),s._v(" "),n("img",{attrs:{src:"https://resource-save-01.oss-cn-chengdu.aliyuncs.com/img/20210811134812.png"}}),s._v(" "),n("div",{staticClass:"language-css line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-css"}},[n("code",[s._v("输入：head = [1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("4]\n输出：[2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("3]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"解法-1-遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解法-1-遍历"}},[s._v("#")]),s._v(" 解法 1：遍历")]),s._v(" "),n("p",[s._v("直接上图")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://resource-save-01.oss-cn-chengdu.aliyuncs.com/img/20210811135524.png",alt:""}})]),s._v(" "),n("p",[s._v("定义一个 pre 结点 要实现每 2 个结点的交换 首先需要临时存储这两个需要交换的结点 每一次遍历的规则如下：")]),s._v(" "),n("ol",[n("li",[s._v("pre.next 指向需要交换的第一个结点（如“1”--命名为“curr”）， pre.next.next 指向第二个需要交换的结点（如“2”--命名为“currNext”）")]),s._v(" "),n("li",[s._v("让第一个结点（curr）的 next 指向第三个结点，"),n("code",[s._v("curr.next = currNext.next")])]),s._v(" "),n("li",[s._v("让第二个结点（currNext）的 next 指向第一个结点，"),n("code",[s._v("currNext.next = curr")])]),s._v(" "),n("li",[s._v("更新 pre 结点的位置，"),n("code",[s._v("pre = curr")])])]),s._v(" "),n("p",[s._v("另外要考虑的一个点就是返回的头结点，由于 pre 每次都会更新位置，所以需要再引入 dummy 结点来存储需要返回的头结点")]),s._v(" "),n("p",[s._v("经过一次遍历后")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://resource-save-01.oss-cn-chengdu.aliyuncs.com/img/20210811142338.png",alt:""}})]),s._v(" "),n("p",[s._v("完整代码如下")]),s._v(" "),n("p",[s._v("TypeScript")]),s._v(" "),n("div",{staticClass:"language-ts line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("swapPairs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ListNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ListNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" dummy "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" pre "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" dummy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" currNext "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\n\n    curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" currNext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1->3")]),s._v("\n    currNext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2->1")]),s._v("\n\n    pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" currNext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pre -> 2 -> 1")]),s._v("\n    pre "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" dummy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("h3",{attrs:{id:"复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复杂度"}},[s._v("#")]),s._v(" 复杂度")]),s._v(" "),n("p",[s._v("空间复杂度："),n("em",[s._v("O")]),s._v("(1) ，dummy + pre + curr + currNext 4 个指针，问题不大。")]),s._v(" "),n("p",[s._v("时间复杂度："),n("em",[s._v("O")]),s._v("(N)，要遍历完整个链表，N 就是链表的长度。")]),s._v(" "),n("h2",{attrs:{id:"解法-2-递归"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解法-2-递归"}},[s._v("#")]),s._v(" 解法 2：递归")]),s._v(" "),n("p",[s._v("// TODO")])])}),[],!1,null,null,null);t.default=e.exports}}]);